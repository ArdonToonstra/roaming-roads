@page "/trip/{UrlKey}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@implements IDisposable

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using RoamingRoutes.Shared.Models
@using RoamingRoutes.Client.Components
@using System.Globalization

@if (trip == null)
{
    <div class="flex items-center justify-center min-h-screen">
        <div class="text-center">
            <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-orange-600 mx-auto mb-4"></div>
            <p class="text-gray-600 text-lg">Loading your adventure...</p>
        </div>
    </div>
}
else
{
    <PageTitle>@trip.Title</PageTitle>

    <div class="relative h-[60vh] flex items-center justify-center text-white overflow-hidden">
        <div class="absolute inset-0 z-0">
            <img src="@(trip.HeaderImageUrl ?? "/images/default-trip-hero.jpg")" alt="@trip.Title" 
                 class="w-full h-full object-cover object-center" />
            <div class="absolute inset-0 bg-black bg-opacity-40"></div>
        </div>
        
        <div class="relative z-10 text-center px-6 max-w-5xl mx-auto">
            <div class="inline-flex items-center px-4 py-2 bg-white/20 backdrop-blur-sm rounded-full mb-6">
                <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                </svg>
                <span class="text-sm font-medium uppercase tracking-wider">@trip.Country</span>
            </div>
            
            <h1 class="text-5xl md:text-7xl font-bold mb-6 leading-tight font-serif">
                @trip.Title
            </h1>
            
            <p class="text-xl md:text-xl mb-8 text-white/90 max-w-3xl mx-auto leading-relaxed">
                @trip.Description
            </p>
        </div>
    </div>

    <div class="container mx-auto px-6 py-16">
        <div class="lg:grid lg:grid-cols-12 lg:gap-12">
            <aside class="lg:col-span-3 lg:sticky top-24 self-start mb-8 lg:mb-0">
                <div class="bg-white rounded-2xl shadow-lg p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Explore</h3>
                    <nav class="flex flex-col space-y-3">
                        <button @onclick='() => SetView("overview")' type="button" 
                                class="group flex items-center px-4 py-3 text-left font-medium rounded-xl transition-all duration-200 @(currentView == "overview" ? "bg-orange-600 text-white shadow-lg" : "bg-gray-50 text-gray-700 hover:bg-orange-50 hover:text-orange-700")">
                            <svg class="w-5 h-5 mr-3 @(currentView == "overview" ? "text-white" : "text-gray-400 group-hover:text-orange-500")" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"></path>
                            </svg>
                            Overview
                        </button>
                        <button @onclick='() => SetView("timeline")' type="button" 
                                class="group flex items-center px-4 py-3 text-left font-medium rounded-xl transition-all duration-200 @(currentView == "timeline" ? "bg-orange-600 text-white shadow-lg" : "bg-gray-50 text-gray-700 hover:bg-orange-50 hover:text-orange-700")">
                            <svg class="w-5 h-5 mr-3 @(currentView == "timeline" ? "text-white" : "text-gray-400 group-hover:text-orange-500")" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
                            </svg>
                            Timeline
                        </button>
                        <button @onclick='() => SetView("interactive")' type="button" 
                                class="group flex items-center px-4 py-3 text-left font-medium rounded-xl transition-all duration-200 @(currentView == "interactive" ? "bg-orange-600 text-white shadow-lg" : "bg-gray-50 text-gray-700 hover:bg-orange-50 hover:text-orange-700")">
                            <svg class="w-5 h-5 mr-3 @(currentView == "interactive" ? "text-white" : "text-gray-400 group-hover:text-orange-500")" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                            </svg>
                            Interactive Map
                        </button>
                    </nav>
                </div>
            </aside>

            <main class="lg:col-span-9">
                @if (currentView == "overview")
                {
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                        <div class="bg-gradient-to-br from-slate-50 to-slate-100 border border-slate-200 text-slate-700 p-6 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                            <div class="flex items-center">
                                <svg class="w-8 h-8 mr-3 text-slate-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                </svg>
                                <div>
                                    <div class="text-3xl font-bold text-slate-800">@trip.Locations.Count()</div>
                                    <div class="text-slate-500 text-sm font-medium">Days</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-gradient-to-br from-emerald-50 to-emerald-100 border border-emerald-200 text-emerald-700 p-6 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                            <div class="flex items-center">
                                <svg class="w-8 h-8 mr-3 text-emerald-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                                </svg>
                                <div>
                                    <div class="text-3xl font-bold text-emerald-800">@trip.Locations.SelectMany(l => l.Activities).Count()</div>
                                    <div class="text-emerald-600 text-sm font-medium">Activities</div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="bg-gradient-to-br from-amber-50 to-amber-100 border border-amber-200 text-amber-700 p-6 rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-200">
                            <div class="flex items-center">
                                <svg class="w-8 h-8 mr-3 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zM7 13.5c0-.83.67-1.5 1.5-1.5S10 12.67 10 13.5 9.33 15 8.5 15 7 14.33 7 13.5zM12 17.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z" clip-rule="evenodd"></path>
                                </svg>
                                <div>
                                    <div class="text-2xl font-bold text-amber-800">@trip.Country</div>
                                    <div class="text-amber-600 text-sm font-medium">Country</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white rounded-2xl shadow-lg p-8 mb-8">
                        <h2 class="text-3xl font-bold mb-6 text-gray-900">Photo Highlights</h2>
                        @if (trip.OverviewPhotoUrls.Any())
                        {
                            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
                                @foreach (var photoUrl in trip.OverviewPhotoUrls)
                                {
                                    <div class="aspect-w-1 aspect-h-1 group relative overflow-hidden rounded-xl">
                                        <img src="@photoUrl" alt="Trip highlight photo" class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-300" />
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-gray-500">No photo highlights available for this trip yet.</p>
                        }
                    </div>

                    @if (!isMapModalVisible)
                    {
                        <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
                             <div class="p-6 border-b border-gray-100">
                                 <div class="flex items-center justify-between">
                                     <h3 class="text-2xl font-bold text-gray-900">Route Overview</h3>
                                     <button @onclick="ToggleMapModal" class="inline-flex items-center px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors duration-200 text-sm font-medium">
                                         <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                                         View Full Screen
                                     </button>
                                 </div>
                             </div>
                             <div class="cursor-pointer h-96" @onclick="ToggleMapModal">
                                 <Map @ref="mapComponent" GeoJsonUrl="@($"api/trips/{UrlKey}/geojson")" />
                             </div>
                         </div>
                    }
                }
                else if (currentView == "timeline")
                {
                    <div class="max-w-4xl">
                        @foreach (var location in trip.Locations.OrderBy(l => l.Day))
                        {
                            var carouselId = $"photos-day-{location.Day}";
                            <div class="flex items-start space-x-6 mb-12">
                                <div class="flex flex-col items-center flex-shrink-0">
                                    <div class="bg-gradient-to-br from-orange-500 to-orange-600 text-white w-14 h-14 rounded-full flex items-center justify-center font-bold text-xl ring-4 ring-orange-100 shadow-lg">@location.Day</div>
                                    @if (location.Day < trip.Locations.Max(l => l.Day)) 
                                    { 
                                        <div class="w-0.5 h-20 bg-gradient-to-b from-orange-200 to-gray-200 mt-4"></div> 
                                    }
                                </div>
                                <div class="flex-1">
                                    <div class="bg-white p-8 rounded-2xl shadow-lg hover:shadow-xl transition-shadow duration-300">
                                        <div class="flex items-start justify-between mb-4">
                                            <div>
                                                <h3 class="text-2xl font-bold text-gray-900 mb-2">@location.Description</h3>
                                                <div class="flex items-center text-gray-500 mb-4">
                                                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    <span class="text-sm font-medium">@location.Date</span>
                                                </div>
                                            </div>
                                        </div>
                                        
                                        @if(location.Activities.Any()) 
                                        {
                                            <div class="mb-6">
                                                <h4 class="font-semibold text-gray-900 mb-3 flex items-center">
                                                    <svg class="w-4 h-4 mr-2 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    Activities
                                                </h4>
                                                <ul class="space-y-2">
                                                    @foreach(var activity in location.Activities) 
                                                    { 
                                                        <li class="flex items-start">
                                                            <svg class="w-4 h-4 mr-2 mt-0.5 text-gray-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                                                                <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                                            </svg>
                                                            <span class="text-gray-700">@activity</span>
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                        }
                                        
                                        @if (location.PhotoUrls.Any())
                                        {
                                            <div class="relative mt-4">
                                                <div id="@carouselId" class="flex overflow-x-auto gap-3 pb-4 scrollbar-hide">
                                                    @foreach(var photoUrl in location.PhotoUrls)
                                                    {
                                                        <div class="flex-shrink-0 w-64">
                                                            <img src="@photoUrl" alt="Day @location.Day photo" class="rounded-xl object-cover w-full h-48 shadow-md hover:shadow-lg transition-shadow duration-300" />
                                                        </div>
                                                    }
                                                </div>
                                                @if (location.PhotoUrls.Count() > 1)
                                                {
                                                    <button @onclick='() => ScrollCarousel(carouselId, -1)' class="absolute top-1/2 left-0 -translate-y-1/2 bg-white/90 hover:bg-white rounded-full p-2 shadow-lg z-10 transition-all duration-200">
                                                        <svg class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
                                                    </button>
                                                    <button @onclick='() => ScrollCarousel(carouselId, 1)' class="absolute top-1/2 right-0 -translate-y-1/2 bg-white/90 hover:bg-white rounded-full p-2 shadow-lg z-10 transition-all duration-200">
                                                        <svg class="h-5 w-5 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>
                                                    </button>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (currentView == "interactive")
                {
                    @if (selectedLocation != null)
                    {
                        <div class="flex flex-col items-center">
                            <div class="bg-white p-8 rounded-2xl shadow-lg w-full max-w-5xl mb-8">
                                <div class="flex items-center justify-between mb-6">
                                    <button @onclick="SelectPreviousDay" disabled="@(!hasPreviousDay)" class="p-3 rounded-full hover:bg-gray-100 disabled:opacity-25 transition-all duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>
                                    </button>
                                    <div class="text-center">
                                        <h3 class="text-3xl font-bold text-gray-900">@selectedLocation.Description</h3>
                                        <p class="text-lg text-gray-500 mt-2">Day @selectedLocation.Day &bull; @selectedLocation.Date</p>
                                    </div>
                                    <button @onclick="SelectNextDay" disabled="@(!hasNextDay)" class="p-3 rounded-full hover:bg-gray-100 disabled:opacity-25 transition-all duration-200">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-gray-600" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>
                                    </button>
                                </div>
                                
                                @if (selectedLocation.Activities.Any())
                                {
                                    <div class="mb-6">
                                        <h4 class="font-semibold text-gray-900 mb-4 flex items-center">
                                            <svg class="w-5 h-5 mr-2 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                                            </svg>
                                            Activities for this day
                                        </h4>
                                        <ul class="grid grid-cols-1 md:grid-cols-2 gap-3">
                                            @foreach(var activity in selectedLocation.Activities) 
                                            { 
                                                <li class="flex items-start p-3 bg-gray-50 rounded-lg">
                                                    <svg class="w-4 h-4 mr-2 mt-0.5 text-orange-500 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                                                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                                                    </svg>
                                                    <span class="text-gray-700">@activity</span>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }
                            </div>
                            
                            <div class="bg-white rounded-2xl shadow-lg overflow-hidden w-full max-w-5xl">
                                <div class="p-6 border-b border-gray-100">
                                    <h4 class="text-xl font-bold text-gray-900 flex items-center">
                                        <svg class="w-5 h-5 mr-2 text-orange-500" fill="currentColor" viewBox="0 0 20 20">
                                            <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"></path>
                                        </svg>
                                        Location Map
                                    </h4>
                                </div>
                                <div class="h-96">
                                    <DailyMapView @key="selectedLocation.Id" Location="selectedLocation" />
                                </div>
                            </div>
                        </div>
                    }
                }
            </main>
        </div>
    </div>
}

@if (isMapModalVisible)
{
    <div class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50" @onclick="ToggleMapModal">
        <div class="bg-white rounded-lg shadow-2xl w-11/12 h-5/6 p-4" @onclick:stopPropagation="true">
            <div class="relative w-full h-full">
                <button @onclick="ToggleMapModal" class="absolute top-2 right-2 bg-white rounded-full p-2 z-20 shadow-lg hover:bg-gray-50 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                </button>
                <Map @ref="mapComponentModal" GeoJsonUrl="@($"api/trips/{UrlKey}/geojson")" />
            </div>
        </div>
    </div>
}


@code {
    [Parameter]
    public string? UrlKey { get; set; }
    private Trip? trip;
    private string currentView = "overview";
    private Location? selectedLocation;
    private Map? mapComponent;
    private Map? mapComponentModal;
    private bool isMapModalVisible = false;

    private Dictionary<string, CarouselState> carouselStates = new();
    private DotNetObjectReference<TripDetail>? objRef;
    
    // Simplified carousel state class (kept for future use)
    public class CarouselState
    {
        public bool CanScrollLeft { get; set; }
        public bool CanScrollRight { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        objRef = DotNetObjectReference.Create(this);
        if (!string.IsNullOrEmpty(UrlKey))
        {
            trip = await Http.GetFromJsonAsync<Trip>($"api/trips/{UrlKey}");
            if (trip != null)
            {
                selectedLocation = trip.Locations.OrderBy(l => l.Day).FirstOrDefault();
            }
        }
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        // Removed carousel initialization since we're using simpler approach
        return Task.CompletedTask;
    }

    private async Task ScrollCarousel(string carouselId, int direction)
    {
        await JSRuntime.InvokeVoidAsync("roamingRoutesGeneral.scrollCarousel", carouselId, direction);
    }

    private async Task ToggleMapModal()
    {
        isMapModalVisible = !isMapModalVisible;
        if (isMapModalVisible)
        {
            await Task.Delay(50);
            if (mapComponentModal != null)
            {
                await mapComponentModal.InvalidateMapSize();
            }
        }
    }

    private async Task SetView(string view)
    {
        currentView = view;
        if (view == "interactive" && trip != null && trip.Locations.Any() && selectedLocation == null)
        {
            await SelectDay(trip.Locations.OrderBy(l => l.Day).First());
        }
    }

    private async Task SelectDay(Location location)
    {
        selectedLocation = location;
        await Task.CompletedTask;
    }

    private bool hasPreviousDay => selectedLocation != null && selectedLocation.Day > trip?.Locations.Min(l => l.Day);
    private bool hasNextDay => selectedLocation != null && selectedLocation.Day < trip?.Locations.Max(l => l.Day);
    private async Task SelectPreviousDay()
    {
        if (hasPreviousDay && trip != null)
        {
            var prevDay = trip.Locations.OrderBy(l => l.Day).Last(l => l.Day < selectedLocation!.Day);
            await SelectDay(prevDay);
        }
    }

    private async Task SelectNextDay()
    {
        if (hasNextDay && trip != null)
        {
            var nextDay = trip.Locations.OrderBy(l => l.Day).First(l => l.Day > selectedLocation!.Day);
            await SelectDay(nextDay);
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}